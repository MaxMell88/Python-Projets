# Import the PrimeGenerator class from its module
from PrimeGenerator.PrimeGenerator import PrimeGenerator

# Import the measure_time function from the Funkce module
from Funkce import measure_time

if _name_ == "_main_":
    print("--- Testing PrimeGenerator Functionality ---")

    # --- Test 1: Basic Initialization and Generation ---
    initial_limit = 15_485_863 # The 1,000,000th prime number
    print(f"\nInitializing PrimeGenerator with limit: {initial_limit}")
    prime_gen = PrimeGenerator(initial_limit)
    print(f"Current limit: {prime_gen.get_limit()}")

    print("\nAttempting to get primes WITHOUT generating sieve first (expected error):")
    try:
        prime_gen.get_primes()
    except RuntimeError as e:
        print(f"Caught expected error: {e}")

    print(f"\nGenerating sieve for limit {prime_gen.get_limit()}...")
    _, duration_gen = measure_time(prime_gen.generate_sieve)
    print(f"Sieve generation completed in {duration_gen:.6f} seconds.")
    print(f"Number of primes found: {len(prime_gen.get_primes())}")

    # --- Test 2: Getting N-th Prime ---
    n_order = 1_000_000
    print(f"\nGetting {n_order}. prime number:")
    nth_prime, duration_nth = measure_time(prime_gen.get_nth_prime, n_order)
    print(f"{n_order}. prime is: {nth_prime}")
    print(f"Operation took {duration_nth:.6f} seconds.")

    # --- Test 3: Checking Primality ---
    test_num_prime = 15_485_863
    test_num_not_prime = 15_485_864
    test_num_out_of_range = 20_000_000

    print(f"\nChecking primality of {test_num_prime}:")
    is_prime_res, duration_is_prime = measure_time(prime_gen.is_prime, test_num_prime)
    print(f"Is {test_num_prime} prime? {is_prime_res}")
    print(f"Operation took {duration_is_prime:.6f} seconds.")

    print(f"\nChecking primality of {test_num_not_prime}:")
    is_prime_res_2, duration_is_prime_2 = measure_time(prime_gen.is_prime, test_num_not_prime)
    print(f"Is {test_num_not_prime} prime? {is_prime_res_2}")
    print(f"Operation took {duration_is_prime_2:.6f} seconds.")

    print(f"\nChecking primality of {test_num_out_of_range} (out of limit):")
    is_prime_res_3, duration_is_prime_3 = measure_time(prime_gen.is_prime, test_num_out_of_range)
    print(f"Is {test_num_out_of_range} prime? {is_prime_res_3}")
    print(f"Operation took {duration_is_prime_3:.6f} seconds.")

    # --- Test 4: Changing Limit and Regenerating ---
    new_limit = 10_000_000
    print(f"\nChanging limit to {new_limit}...")
    prime_gen.set_limit(new_limit)
    print(f"New limit: {prime_gen.get_limit()}")

    print("\nAttempting to get primes AFTER limit change WITHOUT regenerating sieve (expected error):")
    try:
        prime_gen.get_primes()
    except RuntimeError as e:
        print(f"Caught expected error: {e}")

    print(f"\nGenerating sieve for new limit {prime_gen.get_limit()}...")
    _, duration_regen = measure_time(prime_gen.generate_sieve)
    print(f"Sieve regeneration completed in {duration_regen:.6f} seconds.")
    print(f"Number of primes found: {len(prime_gen.get_primes())}")

    print("\n--- All tests completed ---")